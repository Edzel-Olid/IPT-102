@page "/Disclaimer"

<h1>
    Disclaimer<br><br>

    The content of this website is intended for educational purposes only. <br><br> 
    It is part of an academic project developed by an IT student of Southern Christian College. <br><br> 
    All materials and information provided on this website are solely for instructional use, and should not be considered as professional or commercial advice.<br><br> 
    The website may include links or references to third-party resources for educational enhancement, but it does not claim any responsibility for the accuracy, legality, or content of external sites.
</h1>

<style>
    h3 {
        margin: 10px 0;
        font-size: 2rem;
        color: white;
    }
</style>



@page "/display-name"
<br>
<br>
<h3>Enter Your Name</h3>

<!-- Input Fields -->
<div>
    <label for="firstName">First Name:</label>
    <input type="text" @bind="firstName" id="firstName" />
</div>

<div>
    <label for="MiddleInitail">Middle Initial:</label>
    <input type="text" @bind="MiddleInitial" id="MiddleInitial" />
</div>

<div>
    <label for="lastName">Last Name:</label>
    <input type="text" @bind="lastName" id="lastName" />
</div>
<br>
<button @onclick="DisplayFullName">ENTER</button>

<!-- Sorting buttons -->
@if (nameEntries?.Count > 0)
{
   
    <div class="sorting-buttons">
        <br>
        <button @onclick="SortAscending">Ascending</button>
        
        <button @onclick="SortDescending">Descending</button>
    </div>
}

<!-- Display the list of names with IDs -->
@if (nameEntries?.Count > 0)
{
    <div class="name-box">
        <h4>Student List:</h4>
        @foreach (var entry in nameEntries)
        {<br>
            <p>@entry.FullName <br> School-ID: <strong>@entry.ID</strong></p>
        }
    </div>

    <!-- Select Field for Deleting a Student by ID -->
    <div>
        <label for="deleteId">Select ID to Delete:</label>
        <select @bind="selectedId">
            <option value="">SELECT ID</option>
            @foreach (var entry in nameEntries)
            {
                <option value="@entry.ID">@entry.ID</option>
            }
        </select>
        <button @onclick="DeleteSelectedEntry">DELETE ID</button>
    </div>
}

@code {
    private string firstName;
    private string MiddleInitial;
    private string lastName;
    private string selectedId; // Used for the select dropdown
    private List<NameEntry> nameEntries = new();

    // Class to store the name and ID
    public class NameEntry
    {
        public string FullName { get; set; }
        public string ID { get; set; }
    }

    // On page load, retrieve stored data
    protected override async Task OnInitializedAsync()
    {
        // Retrieve the list of names and IDs from localStorage
        var storedEntries = await JS.InvokeAsync<string>("localStorage.getItem", "nameEntries");

        if (!string.IsNullOrEmpty(storedEntries))
        {
            // Deserialize the stored data back into the list
            nameEntries = System.Text.Json.JsonSerializer.Deserialize<List<NameEntry>>(storedEntries) ?? new();
        }
    }

    private async void DisplayFullName()
    {
        // Create a new name entry
        var fullName = $"{firstName} {MiddleInitial} {lastName}";
        var id = GenerateRandomId();

        // Add the new entry to the list
        nameEntries.Add(new NameEntry { FullName = fullName, ID = id });

        // Serialize the list and store it in localStorage
        var serializedEntries = System.Text.Json.JsonSerializer.Serialize(nameEntries);
        await JS.InvokeVoidAsync("localStorage.setItem", "nameEntries", serializedEntries);
    }

    // Method to generate a single random ID in the format "####-####"
    private string GenerateRandomId()
    {
        Random random = new Random();
        int part1 = random.Next(1000, 9999); // Generate a 4-digit number
        int part2 = random.Next(1000, 9999); // Generate another 4-digit number
        return $"{part1}-{part2}";
    }

    // Method to delete an entry based on the selected ID from the dropdown
    private async void DeleteSelectedEntry()
    {
        if (!string.IsNullOrEmpty(selectedId))
        {
            var entryToRemove = nameEntries.FirstOrDefault(e => e.ID == selectedId);
            if (entryToRemove != null)
            {
                nameEntries.Remove(entryToRemove);

                // Update localStorage after deleting the entry
                var serializedEntries = System.Text.Json.JsonSerializer.Serialize(nameEntries);
                await JS.InvokeVoidAsync("localStorage.setItem", "nameEntries", serializedEntries);

                selectedId = null; // Clear the selected ID after deletion
            }
        }
    }

    // Method to sort the list in ascending order
    private void SortAscending()
    {
        nameEntries = nameEntries.OrderBy(e => e.FullName).ToList();
    }

    // Method to sort the list in descending order
    private void SortDescending()
    {
        nameEntries = nameEntries.OrderByDescending(e => e.FullName).ToList();
    }
}

@inject IJSRuntime JS

