@page "/List"
<div>
    <h4>ENTER INFORMATION</h4>
    <br><br>
    <label for="lastName">Last Name:</label>
    <input type="text" @bind="lastName" id="lastName" />
</div>
<div>
    <label for="firstName">First Name:</label>
    <input type="text" @bind="firstName" id="firstName" />
</div>
<div>
    <label for="MiddleInitial">Middle Initial:</label>
    <input type="text" @bind="MiddleInitial" id="MiddleInitial" />
</div>
<br>
<button @onclick="DisplayFullName">ENTER</button>


@if (nameEntries?.Count > 0)
{
    <div class="name-box">
        <h4>SENIOR CITIZENS AFFAIRS LIST</h4>

        <table class="table">
            <thead>
                <tr>
                    <th>Last Name</th>
                    <th>First Name</th>
                    <th>Middle Initial</th>
                    <th>OSCA No.</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in nameEntries)
                {
                    var nameParts = entry.FullName.Split(' ');
                    <tr>
                        <td>@nameParts[0]</td>
                        <td>@nameParts[1]</td>
                        <td>@nameParts[2]</td>
                        <td>@entry.ID</td>
                        <td>
                            <button @onclick="() => StartEdit(entry.ID)">Edit</button>

                           <button @onclick="() => DeleteEntry(entry.ID)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (isEditing)
    {
        <div class="edit-form">
            <h4>Edit Form </h4>
           <label>Last Name: </label>
            <input type="text" @bind="editLastName" /><br>
            <label>First Name: </label>
            <input type="text" @bind="editFirstName" /><br>
            <label>Middle Initial: </label>
            <input type="text" @bind="editMiddleInitial" /><br>
            <button @onclick="SaveEdit">Save</button>
            <button @onclick="CancelEdit">Cancel</button>
        </div>
    }
}
@code {
    private string lastName;
    private string firstName;
    private string MiddleInitial;
    private string selectedId; 
    private List<NameEntry> nameEntries = new();

    private bool isEditing = false; 
    private string editId; 
    private string editLastName;
    private string editFirstName;
    private string editMiddleInitial;


  
    public class NameEntry
    {
        public string FullName { get; set; }
        public string ID { get; set; }
    }

    
    protected override async Task OnInitializedAsync()
    {
        
        var storedEntries = await JS.InvokeAsync<string>("localStorage.getItem", "nameEntries");

        if (!string.IsNullOrEmpty(storedEntries))
        {
            
            nameEntries = System.Text.Json.JsonSerializer.Deserialize<List<NameEntry>>(storedEntries) ?? new();
        }
    }

    private async void DisplayFullName()
    {
        
        var fullName = $"{lastName} {firstName} {MiddleInitial}";
        var id = GenerateRandomId();

        
        nameEntries.Add(new NameEntry { FullName = fullName, ID = id });

        
        var serializedEntries = System.Text.Json.JsonSerializer.Serialize(nameEntries);
        await JS.InvokeVoidAsync("localStorage.setItem", "nameEntries", serializedEntries);
    }

    
    private string GenerateRandomId()
    {
        Random random = new Random();
        int part1 = random.Next(10000, 99999); 
        return $"{part1}";
    }

    
    private void StartEdit(string id)
    {
       
        var entry = nameEntries.FirstOrDefault(e => e.ID == id);
        if (entry != null)
        {
            editId = id;
            editLastName = entry.FullName.Split(' ')[2];
            editFirstName = entry.FullName.Split(' ')[0];
            editMiddleInitial = entry.FullName.Split(' ')[1];
            isEditing = true;
        }
    }

   
    private async void SaveEdit()
    {
        var entry = nameEntries.FirstOrDefault(e => e.ID == editId);
        if (entry != null)
        {
            entry.FullName = $"{editLastName} {editFirstName} {editMiddleInitial}";

            var serializedEntries = System.Text.Json.JsonSerializer.Serialize(nameEntries);
            await JS.InvokeVoidAsync("localStorage.setItem", "nameEntries", serializedEntries);

            isEditing = false; 
        }
    }

   
    private void CancelEdit()
    {
        isEditing = false;
    }

   
    private async void DeleteEntry(string id)
    {
        var entryToRemove = nameEntries.FirstOrDefault(e => e.ID == id);
        if (entryToRemove != null)
        {
            nameEntries.Remove(entryToRemove);

            
            var serializedEntries = System.Text.Json.JsonSerializer.Serialize(nameEntries);
            await JS.InvokeVoidAsync("localStorage.setItem", "nameEntries", serializedEntries);
        }
    }
}

@inject IJSRuntime JS

<style>
    .name-box {
        margin-top: 20px;

    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
    }

    .table th,
    .table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
         
    }

    .table th {
            background-color: white;
    }

    .edit-form {
        margin-top: 20px;
        border: 1px solid #ddd;
        padding: 10px;
    }
</style>



